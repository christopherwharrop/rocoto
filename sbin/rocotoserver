#!/usr/bin/ruby

# Get the base directory of the WFM installation
__WFMDIR__=File.expand_path("../../",__FILE__)

# Add include paths for WFM and libxml-ruby libraries
$:.unshift("#{__WFMDIR__}/lib")
$:.unshift("#{__WFMDIR__}/lib/rubysl-date/lib")
$:.unshift("#{__WFMDIR__}/lib/rubysl-parsedate/lib")
$:.unshift("#{__WFMDIR__}/lib/libxml-ruby")
$:.unshift("#{__WFMDIR__}/lib/sqlite3-ruby")
$:.unshift("#{__WFMDIR__}/lib/open4/lib")
$:.unshift("#{__WFMDIR__}/lib/thread/lib")

# Load workflow engine library
require 'tmpdir'
require 'drb'
require 'socket'
require 'workflowmgr/workflowserver'
require 'workflowmgr/utilities'
require 'libxml'
require 'fileutils'

# Set the verbosity for the server process
WorkflowMgr.const_set("VERBOSE",ARGV[1].to_i)

# Set the workflow id for the server process
WorkflowMgr.const_set("WORKFLOW_ID",ARGV[2])

# Turn off that ridiculous Libxml-ruby handler that automatically sends output to stderr
# We want to control what output goes where and when
LibXML::XML::Error.set_handler(&LibXML::XML::Error::QUIET_HANDLER)

# Daemonize this process so that there aren't problems caused
# by failure to reap exit statuses and propagation of zombies
exit if fork
Process.setsid
exit if fork
STDIN.reopen "/dev/null"
STDOUT.reopen "/dev/null", "a"
#STDERR.reopen "/dev/null", "a"

# Start a Drb Server that will serve the workflow server object
DRb.start_service(nil,WorkflowMgr::WorkflowServer.new)

# Write the URI and our pid to the pipe inherited from our parent
begin
  uri_io=IO.new(ARGV[3].to_i)  # Open file desriptor passed to us as ARGV[3]
  uri_io.puts DRb.uri          # Write our URI
  uri_io.puts Process.pid      # Write our pid
  uri_io.close                 # Close the write end of the pipe, the read end has already been closed
rescue
  # If we can't write the URI file, shut down the server because nothing is going to be able to talk to it
  WorkflowMgr.log("#{$!}")
  WorkflowMgr.stderr("#{$!}",1)
  DRb.stop_service
  Process.exit(1)
end

Thread.new do

  while true do

    begin

      # Test if the rocoto process that launched this server process has become a zombie
      isZombie = false
      if RUBY_PLATFORM=~/linux/
        state=IO.readlines("/proc/#{ARGV[0]}/status",nil)[0].match(/^State:\s+(\w)/)[1]
        isZombie = state=="Z"
      else
        system("ps -eo pid,stat | grep Z | grep #{ARGV[0].to_i} 2>&1 > /dev/null")
        isZombie = $?.exitstatus == 0
      end

      # If our parent has become a zombie, it's time to close STDERR so that the zombie parent can go away
      if isZombie
        STDERR.reopen "/dev/null", "a"
        break
      end
    rescue Errno::ENOENT
    rescue
      WorkflowMgr.log("#{$!}")
      WorkflowMgr.stderr("#{$!}",1)
      # Close STDERR on an excepttion to detatch from crond and ensure the process shuts down
      STDERR.reopen "/dev/null", "a"
      break
    end

    sleep 30

  end

end

# Set up a safety thread to shutdown orphaned/abandoned server processes
Thread.new do

  hostinfo=Socket::getaddrinfo(Socket.gethostname, nil, nil, Socket::SOCK_STREAM)[0]

  # A safety net to shutdown the bqserver process if it has been alive for more than 4 days
  # The bqserver normally stays alive until all qsub status has been retrieved from it.
  # If the user runs Rocoto manually, and then goes home for the weekend, the status might
  # not get retrieved until the following week.  This is not ideal, but until a better
  # solution is found, should catch those bqserver processes that get accidentally abandoned
  if $0=~/bqserver$/
    sleep 3600*24*4
    WorkflowMgr.log("Shutting down #{$0} server process #{Process.pid} on host #{hostinfo[2]} (#{hostinfo[3]}) because it appears to be abandoned")
    DRb.stop_service

  # Shutdown the ioserver and dbserver processes as soon as they are orphaned (that should never happen unless rocotorun/rocotoboot dies uncleanly)
  else
    while true do
      begin
        # Test if the rocoto process that launched this server process is still alive
        Process.getpgid(ARGV[0].to_i)
        sleep 30
      rescue Errno::ESRCH
        # If the process that launched this server is dead, shutdown this process
        WorkflowMgr.log("Shutting down #{$0} server process #{Process.pid} on host #{hostinfo[2]} (#{hostinfo[3]}) because it has been orphaned by an ungraceful shutdown.")
        DRb.stop_service
      end
    end  # while true
  end  # unless $0

end  # Thread.new

# Wait forever for the server to quit
DRb.thread.join
